<?xml version="1.0" encoding="GBK"?>
<!-- 指定Spring配置文件的Schema信息 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.microsoft.sqlserver.jdbc.SQLServerDriver">
		</property>
		<property name="url"
			value="jdbc:sqlserver://localhost:1432; DatabaseName=OA">
		</property>
		<property name="username" value="sa"></property>
		<property name="password" value="qwerty"></property>
	</bean>

	<!-- 定义Hibernate的SessionFactory -->
	<!-- 依赖注入数据源，注入正是上面定义的dataSource -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"
		p:dataSource-ref="dataSource">
		<!-- mappingResouces属性用来列出全部映射文件 -->
		<property name="mappingResources">
			<list>
				<!-- 以下用来列出Hibernate映射文件 -->
				<value>qiang/domain/Application.hbm.xml</value>
				<value>qiang/domain/Attend.hbm.xml</value>
				<value>qiang/domain/AttendType.hbm.xml</value>
				<value>qiang/domain/CheckBack.hbm.xml</value>
				<value>qiang/domain/Employee.hbm.xml</value>
				<value>qiang/domain/Payment.hbm.xml</value>
				<value>qiang/domain/Task.hbm.xml</value>
			</list>
		</property>
		<!-- 定义Hibernate的SessionFactory的属性 -->
		<property name="hibernateProperties">
			<!-- 指定数据库方言、是否自动建表 是否生成SQL语句等 -->
			<value>
				hibernate.dialect=org.hibernate.dialect.SQLServerDialect
				hibernate.hbm2ddl.auto=update
				hibernate.show_sql=true
				hibernate.format_sql=true
				#开启二级缓存
				hibernate.cache.use_second_level_cache=true
				#设置二级缓存的提供者
				hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
			</value>
		</property>
	</bean>

	<!-- 配置Hibernate的局部事务管理器，使用HibernateTransactionManager类 -->
	<!-- 该类实现PlatformTransactionManager接口，是针对Hibernate的特定实现 -->
	<!-- 并注入SessionFactory的引用 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory" />

	<!-- 配置事务增强处理Bean,指定事务管理器 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 用于配置详细的事务语义 -->
		<tx:attributes>
			<!-- 所有以'get'开头的方法是read-only的 -->
			<tx:method name="get*" read-only="true" />
			<!-- 其他方法使用默认的事务设置 -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="qiangPointcut" expression="bean(empService)||bean(mgrService)" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="qiangPointcut" />
	</aop:config>

	<!-- 定义业务逻辑组件模板 -->
	<!-- 为之注入DAO组件 -->
	<bean id="serviceTemplate" abstract="true" lazy-init="true"
		p:appDao-ref="applicationDao" p:attendDao-ref="attendDao"
		p:typeDao-ref="attendTypeDao" p:checkDao-ref="checkBackDao"
		p:empDao-ref="employeeDao" p:mgrDao-ref="managerDao" 
		p:payDao-ref="paymentDao" p:taskDao-ref="taskDao"/>

	<!-- 定义两个业务逻辑组件，继承业务逻辑组件的模板 -->
	<bean id="empService" class="qiang.service.EmpService" parent="serviceTemplate" />
	<bean id="mgrService" class="qiang.service.MgrService" parent="serviceTemplate" />
	<bean id="autoService" class="qiang.service.AutoService" parent="serviceTemplate" />
	<bean id="dataService" class="qiang.others.data.DataService" parent="serviceTemplate"/>	
	<bean id="dbService" class="qiang.others.test.DBService" parent="serviceTemplate" />
	
	<!-- 自动结算工资触发器 -->
	<bean id="cronTriggerPay" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<!-- 使用嵌套Bean的方式来定义任务Bean -->
			<bean class="org.springframework.scheduling.quartz.JobDetailBean">
				<!-- 指定任务Bean的实现类 -->
				<property name="jobClass" value="qiang.job.PayJob" />
				<!-- 为任务Bean注入属性 -->
				<property name="jobDataAsMap">
					<map>
						<entry key="autoService" value-ref="autoService" />
					</map>
				</property>
			</bean>
		</property>
		<!-- 指定Cron表达式：每月3日2时启动 -->
		<property name="cronExpression" value="0 0 2 3 * ? *" />
	</bean>

	<!-- 自动打卡触发器 -->
	<bean id="cronTriggerPunch" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<!-- 使用嵌套Bean的方式来定义任务Bean -->
			<bean class="org.springframework.scheduling.quartz.JobDetailBean">
				<!-- 指定任务Bean的实现类 -->
				<property name="jobClass" value="qiang.job.PunchJob" />
				<!-- 为任务Bean注入属性 -->
				<property name="jobDataAsMap">
					<map>
						<entry key="autoService" value-ref="autoService" />
					</map>
				</property>
			</bean>
		</property>
		<!-- 指定Cron表达式：周一到周五7点、12点执行调度 -->
		<property name="cronExpression" value="0 0 7,12 ? * MON-FRI" />
	</bean>
	
	<!-- 自动清除数据触发器 -->
	<bean id="cronTriggerClear" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<!-- 使用嵌套Bean的方式来定义任务Bean -->
			<bean class="org.springframework.scheduling.quartz.JobDetailBean">
				<!-- 指定任务Bean的实现类 -->
				<property name="jobClass" value="qiang.job.ClearJob" />
				<!-- 为任务Bean注入属性 -->
				<property name="jobDataAsMap">
					<map>
						<entry key="autoService" value-ref="autoService" />
					</map>
				</property>
			</bean>
		</property>
		<!-- 指定Cron表达式：每月3日2时启动 -->
		<property name="cronExpression" value="0 0 0 1 3 ? *" />
	</bean>
	
	<!-- 执行实际的调度调度 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref local="cronTriggerPay" />
				<ref local="cronTriggerPunch" />
				<ref local="cronTriggerClear" />
			</list>
		</property>
	</bean>
</beans>